//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LeaFramework.Game.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LeaFramework.Game.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die cbuffer perFrame
        ///{
        ///    float4x4 ProjMatrix;
        ///    float scaleSizeX;
        ///    float scaleSizeY;
        ///};
        ///
        ///struct GS_IN
        ///{
        ///    float2 Position : POSITION;
        ///    float2 Size : TEXCOORD;
        ///    float4 Color : COLOR;
        ///};
        ///
        ///struct PS_IN
        ///{
        ///    float4 Position : SV_POSITION0;
        ///    float4 Color : COLOR;
        ///    float2 UVCoordinate : TEXCOORD;
        ///};
        ///
        ///[maxvertexcount(4)]
        ///void GSMain(point GS_IN input[1], inout TriangleStream&lt;PS_IN&gt; triStream)
        ///{
        ///    PS_IN output;
        ///
        ///    float2 v1 = float2(input[0].Size.x + scaleSizeX, input [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string geometryShader {
            get {
                return ResourceManager.GetString("geometryShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Texture2D tex : register(t1);
        ///SamplerState samp;
        ///
        ///
        ///struct PS_IN
        ///{
        ///    float4 Position : SV_POSITION0;
        ///    float4 Color : COLOR0;
        ///    float2 UVCoordinate : TEXCOORD;
        ///};
        ///
        ///float4 PSMain(PS_IN input) : SV_Target
        ///{
        ///    float3 t = tex.Sample(samp, input.UVCoordinate, 0);
        ///
        ///    return float4(t, 1);
        ///} ähnelt.
        /// </summary>
        internal static string pixelShader {
            get {
                return ResourceManager.GetString("pixelShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die struct VS_IN
        ///{
        ///    float2 Position : POSITION0;
        ///    float2 Size : TEXCOORD;
        ///    float4 Color : COLOR0;
        ///};
        ///
        ///struct GS_IN
        ///{
        ///    float2 Position : POSITION;
        ///    float2 Size : TEXCOORD;
        ///    float4 Color : COLOR;
        ///
        ///};
        ///
        ///GS_IN VSMain(VS_IN input)
        ///{
        ///    GS_IN output;
        ///
        ///    output.Position = input.Position;
        ///    output.Size = input.Size;
        ///    output.Color = input.Color;
        ///
        ///
        ///    return output;
        ///}
        ///
        /// ähnelt.
        /// </summary>
        internal static string vertexShader {
            get {
                return ResourceManager.GetString("vertexShader", resourceCulture);
            }
        }
    }
}
